/**
 * 2024.1.9
 */
package matsu.num.statistics.random.gumbel;

import matsu.num.statistics.random.ExponentialRnd;
import matsu.num.statistics.random.GumbelRnd;
import matsu.num.statistics.random.Random;
import matsu.num.statistics.random.common.Exponentiation;
import matsu.num.statistics.random.common.ExponentiationFactory;
import matsu.num.statistics.random.exp.ExponentialRndFactory;

/**
 * 単峰分布タイプのZiggurat法により実装された, 標準Gumbel分布に従う乱数発生器.
 * 
 * @author Matsuura Y.
 * @version 17.5
 */
final class UniZiggGumbelRnd implements GumbelRnd {

    private static int N = 128;

    /**
     * F_R = 7.509201850246468E-4;
     * R_LOWER = -2.2448572982031223;
     * R_UPPER = 7.193459705408719;
     * V_LOWER = 7.955447997377301E-5;
     * V_UPPER = 7.512024082314816E-4;
     * V = 0.007918179638878729;
     */

    private static final double R_LOWER = -2.2448572982031223;
    private static final double R_UPPER = 7.193459705408719;
    private static final double X0 = 0d;
    private static final double EXP_R_LOWER = Math.exp(R_LOWER);

    private final Exponentiation exponentiation = ExponentiationFactory.instance();

    private final double[] X_LOWER = {
            0.0, -0.2673193376281921, -0.3510237686340313, -0.4084427617247585,
            -0.45350293581073436, -0.49120685898601457, -0.5239708702153246, -0.5531616827471729,
            -0.5796338045216691, -0.6039601071292467, -0.6265449669039164, -0.6476853863127439,
            -0.667606500261948, -0.6864834113814569, -0.7044552497208169, -0.721634575621229,
            -0.7381138716154553, -0.7539701477878009, -0.769268286162544, -0.7840635194226834,
            -0.7984033012870202, -0.8123287404786276, -0.8258757158383236, -0.8390757546229917,
            -0.851956732307022, -0.8645434360363444, -0.8768580226603347, -0.8889203943447774,
            -0.9007485090922648, -0.9123586393716879, -0.9237655890230676, -0.9349828763436913,
            -0.9460228895600583, -0.956897019596277, -0.9676157740563804, -0.9781888755689359,
            -0.9886253470418391, -0.9989335859027453, -1.0091214290261843, -1.0191962097496914,
            -1.0291648081414257, -1.0390336954879782, -1.0488089738136757, -1.0584964111141155,
            -1.068101472881148, -1.0776293504094836, -1.0870849863030076, -1.0964730975389154,
            -1.1057981963976942, -1.1150646095250132, -1.1242764953562938, -1.1334378601049853,
            -1.1425525724904182, -1.1516243773598065, -1.1606569083409075, -1.1696536996464908,
            -1.1786181971387633, -1.187553768750822, -1.1964637143528818, -1.2053512751431157,
            -1.214219642636361, -1.2230719673184731, -1.2319113670296251, -1.2407409351363057,
            -1.2495637485490192, -1.258382875640736, -1.2672013841198857, -1.2760223489111626,
            -1.2848488600975525, -1.2936840309778328, -1.3025310062953617, -1.3113929706962602,
            -1.3202731574781925, -1.3291748576949065, -1.3381014296865967, -1.3470563091121277,
            -1.3560430195663151, -1.3650651838739996, -1.3741265361627553, -1.3832309348280063,
            -1.3923823765183945, -1.401585011285807, -1.4108431590640105, -1.4201613276628653,
            -1.4295442324923544, -1.4389968182628954, -1.448524282946756, -1.4581321043310158,
            -1.4678260695471093, -1.4776123080274317, -1.4874973284183428, -1.4974880600742597,
            -1.5075918998733993, -1.5178167652371697, -1.5281711544087737, -1.5386642152607055,
            -1.5493058241664868, -1.5601066768036345, -1.5710783931715215, -1.5822336396348877,
            -1.5935862714754314, -1.6051515002964576, -1.6169460917424598, -1.6289886004546255,
            -1.641299651107608, -1.653902276936882, -1.666822330619905, -1.680088987082592,
            -1.693735364303921, -1.707799297295089, -1.7223243133731807, -1.7373608755630923,
            -1.7529679885206684, -1.7692153027914483, -1.7861859169037406, -1.803980177226311,
            -1.8227209385061993, -1.842561021260013, -1.8636940777854643, -1.8863709430240172,
            -1.9109252000784858, -1.9378150520827022, -1.967695954515494, -2.0015561545997635,
            -2.0409952245692042, -2.088878536393385, -2.1512188176751073, -2.2448572982031223,
            -2.3507999557056127
    };

    private final double[] X_UPPER = {
            0.0, 0.293456829704545, 0.39749810389608964, 0.4727354050730899,
            0.534138544071292, 0.5871976347779603, 0.6346035470254132, 0.6778959325038877,
            0.7180467945749316, 0.7557133183536928, 0.7913629512132022, 0.825341450439635,
            0.8579126586048841, 0.8892831003302736, 0.9196179001425806, 0.949051477450438,
            0.9776949622894766, 1.0056414772016293, 1.0329699874277838, 1.0597481647591442,
            1.0860345559508877, 1.1118802506949383, 1.1373301828833764, 1.1624241587643442,
            1.1871976787121845, 1.2116826009627812, 1.2359076828798607, 1.259899026272194,
            1.283680446784514, 1.307273782653789, 1.3306991546333176, 1.35397518628374,
            1.3771191918665031, 1.4001473375794256, 1.4230747807237658, 1.445915790500026,
            1.4686838534321154, 1.491391765869897, 1.5140517155840971, 1.536675354119302,
            1.5592738612909725, 1.5818580029862723, 1.6044381832448402, 1.6270244914457057,
            1.6496267453036477, 1.6722545302771596, 1.6949172359066713, 1.7176240895325705,
            1.7403841877852244, 1.7632065261916128, 1.7861000272036869, 1.8090735669208173,
            1.832136000751679, 1.855296188238734, 1.878563017250471, 1.9019454277321564,
            1.9254524351946476, 1.9490931541124288, 1.972876821396226, 1.9968128201021003,
            2.0209107035377287, 2.045180219927482, 2.069631337800969, 2.0942742722748475,
            2.119119512405009, 2.144177849795825, 2.169460408665099, 2.1949786775779594,
            2.220744543080322, 2.2467703254831544, 2.2730688170728808, 2.29965332305137,
            2.3265377055416514, 2.353736431033374, 2.3812646216859514, 2.4091381109582324,
            2.437373504092539, 2.4659882440494316, 2.4950006835691987, 2.524430164128854,
            2.5542971026717236, 2.5846230871134654, 2.6154309817770667, 2.646745044084386,
            2.6785910540384057, 2.710996458275014, 2.7439905307539227, 2.7776045525051942,
            2.8118720132631934, 2.8468288383192104, 2.8825136445270823, 2.918968030127712,
            2.9562369039500296, 2.9943688606381933, 3.0334166098998283, 3.073437469435703,
            3.1144939332859067, 3.15665432992804, 3.1999935877438688, 3.244594129639511,
            3.2905469239401333, 3.3379527255644548, 3.3869235504416446, 3.4375844378932774,
            3.4900755712927007, 3.5445548481963023, 3.601201019426735, 3.6602175553674647,
            3.721837451594266, 3.7863292618641924, 3.854004755088089, 3.9252287509946258,
            4.000431923643648, 4.0801277169413055, 4.164935066374824, 4.255609495823319,
            4.353086590162283, 4.458544267465009, 4.573494534159049, 4.699923232623873,
            4.840511436809515, 4.9990033427825065, 5.180854789949683, 5.39446576327732,
            5.653767377574724, 5.984457192102971, 6.4425169420515624, 7.193459705408719,
            8.193835541899018
    };

    private final double[] F = {
            0.36787944117144233, 0.35375940522815086, 0.3431809840363772, 0.3341950831854143,
            0.32617782206367146, 0.31883532703080886, 0.31200091094061355, 0.30556889708457324,
            0.2994671031266524, 0.2936435138069845, 0.28805910346714136, 0.2826836551444644,
            0.2774931732073117, 0.2724682030864038, 0.2675926963153296, 0.26285321840784326,
            0.2582383805060835, 0.2537384218070005, 0.24934489640311233, 0.24505043417206712,
            0.24084855528894772, 0.23673352429428976, 0.2327002338258603, 0.2287441109272697,
            0.22486104077030153, 0.221047303972008, 0.2172995246427074, 0.21361462699011394,
            0.2099897988090113, 0.20642246055953073, 0.20291023901729596, 0.1994509446911301,
            0.19604255236670692, 0.1926831842603016, 0.18937109536487912, 0.1861046606478835,
            0.18288236382119538, 0.1797027874524922, 0.1765646042264252, 0.17346656919570852,
            0.17040751288798653, 0.1673863351554277, 0.16440199967133465, 0.16145352899239443,
            0.1585400001171019, 0.15566054048082753, 0.15281432433633088, 0.15000056947553347,
            0.1472185342542903, 0.14446751488692716, 0.14174684298159107, 0.1390558832911194,
            0.13639403165726963, 0.13376071312884932, 0.1311553802366145, 0.12857751140981996,
            0.12602660952105513, 0.12350220054752276, 0.12100383233824884, 0.11853107347787807,
            0.11608351223873267, 0.11366075561371497, 0.11126242842343105, 0.10888817249161918,
            0.10653764588359482, 0.10421052220298431, 0.10190648994252087, 0.09962525188512741,
            0.09736652455191736, 0.0951300376941137, 0.09291553382622288, 0.09072276779810834,
            0.08855150640389338, 0.08640152802588773, 0.08427262231198072, 0.08216458988517934,
            0.08007724208419453, 0.07801040073419784, 0.07596389794708419, 0.07393757595079017,
            0.07193128694743194, 0.0699448930002473, 0.06797826594955556, 0.06603128735819033,
            0.0641038484871191, 0.062195850302243866, 0.060307203513685605, 0.058437828649197915,
            0.05658765616374091, 0.05475662658768386, 0.05294469071660714, 0.051151809846253775,
            0.049377956056857436, 0.04762311255186697, 0.04588727405702681, 0.04417044728689025,
            0.04247265148718292, 0.040793919063051604, 0.03913429630519928, 0.037493844228312964,
            0.03587263953915522, 0.034270775755370714, 0.03268836450066373, 0.031125537007810556,
            0.029582445868360646, 0.028059267077369682, 0.026556202433814406, 0.025073482373470082,
            0.02361136933242043, 0.02217016176808736, 0.020750199003755077, 0.019351867116566532,
            0.017975606164822598, 0.016621919158920095, 0.015291383338672583, 0.013984664556360427,
            0.012702535927493345, 0.011445902483667666, 0.010215834496505356, 0.009013613728997682,
            0.007840799694779252, 0.006699328318688458, 0.005591666091486749, 0.004521066284347248,
            0.0034920313357352465, 0.0025112496730911394, 0.0015898599701419098, 7.509201850246468E-4,
            0.0
    };

    private final double[] X_DIFF;

    /**
     * F[i]-F[i+1]
     */
    private final double[] F_DIFF;

    private final ExponentialRnd expRnd = ExponentialRndFactory.instance();

    {
        if (X_LOWER.length != X_UPPER.length) {
            throw new AssertionError("Bug: Xの長さが異なる");
        }

        X_DIFF = new double[X_LOWER.length];
        for (int i = 0, len_i = X_LOWER.length; i < len_i; i++) {
            X_DIFF[i] = X_UPPER[i] - X_LOWER[i];
        }

        F_DIFF = new double[F.length];
        for (int i = 0, len_i = F.length - 1; i < len_i; i++) {
            F_DIFF[i] = F[i] - F[i + 1];
        }
    }

    UniZiggGumbelRnd() {
        super();
    }

    @Override
    public double nextRandom(Random random) {
        while (true) {
            int int32 = random.nextInt();
            int iArea = int32 & (N - 1);
            int iArea_p_1 = iArea + 1;

            double x = X_LOWER[iArea_p_1] + X_DIFF[iArea_p_1] * random.nextDouble();
            if (X_LOWER[iArea] < x && x < X_UPPER[iArea]) {
                return x;
            }
            if (iArea == N - 1) {
                return x <= X0
                        ? tail_m(random)
                        : tail_p(random);
            }
            double y = F[iArea_p_1] + F_DIFF[iArea] * random.nextDouble();
            if (y < func_p(x)) {
                return x;
            }
        }
    }

    private double tail_p(Random random) {
        while (true) {
            double z = R_UPPER + this.expRnd.nextRandom(random);
            if (1 < exponentiation.exp(z) * this.expRnd.nextRandom(random)) {
                return z;
            }
        }
    }

    private double tail_m(Random random) {
        return -exponentiation.log(EXP_R_LOWER + this.expRnd.nextRandom(random));
    }

    /**
     * 確率密度関数. <br>
     * exp(-x-exp(-x))
     */
    private double func_p(double x) {
        double exp = exponentiation.exp(-x);
        return exponentiation.exp(-exp - x);
    }

    @Override
    public String toString() {
        return "GumbelRnd";
    }
}
