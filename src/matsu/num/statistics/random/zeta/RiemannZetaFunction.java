/*
 * Copyright © 2025 Matsuura Y.
 * 
 * This software is released under the MIT License.
 * http://opensource.org/licenses/mit-license.php
 */

/*
 * 2025.6.2
 */
package matsu.num.statistics.random.zeta;

/**
 * Riemann ゼータ関数を扱うためのユーティリティ.
 * 
 * @author Matsuura Y.
 */
final class RiemannZetaFunction {

    private static final double THRESHOLD_S = 15d;

    /**
     * Stieltjes 定数. <br>
     * zeta(1+t) = (1/t) + sum <sub>n = 0, 1, ...</sub>
     * (-1)<sup>n</sup> &gamma;<sub>n</sub> /(n!) * t<sup>n</sup> <br>
     * としたときの, &gamma;<sub>n</sub> (n = 0, 1, ...) を表す.
     */
    private static final double[] stieltjesConst = {
            0.577215664901532860606512090,
            -0.07281584548367672486058637,
            -0.00969036319287231848453038,
            0.002053834420303345866160046,
            0.002325370065467300057468170,
            0.000793323817301062701753334,
            -0.00023876934543019960987242,
            -0.00052728956705775104607409,
            -0.00035212335380303950960205,
            -0.00003439477441808804817791,
            0.000205332814909064794683722,
            0.000270184439543903526672902,
            0.000167272912105140193353501,
            -0.00002746380660376015886000,
            -0.00020920926205929994583713,
            -0.00028346865532024144664293,
            -0.00019969685830896977470778,
            0.000026277037109918336699466,
            0.000307368408149252826592754,
            0.000503605453047355629055596,
            0.000466343561511559449400594,
            0.000104437769756000115810795,
            -0.00054159958220399770165519,
            -0.00124396209040824577929974,
            -0.00158851127890356156190619,
            -0.00107459195273848882472429,
            0.000656803518637154431504773,
            0.003477836913618538209007359,
            0.006400068531700629458107228,
            0.007371151770472239134412402,
            0.003557728855573160947913537,
            -0.00751332599781522893313516,
            -0.02570372910842040179348788,
            -0.04510673410808021990498284,
            -0.05112692802150846442507582,
            -0.02037304360386131270575189,
            0.072482158816811333733800444,
            0.236026382274301502720981762,
            0.428963446384809152736861546,
            0.517921842692923718978893057,
            0.248721559394615465084491910,
            -0.71957484690130035068887391,
            -2.63879492733573453578828167,
            -5.26493031235502382881103285,
            -7.18874588950352728234209482,
            -5.07234458991637249229894040,
            6.609915609096965813839975106,
            34.03977498215874824766115211,
            78.68247976324258495603848420,
            125.8443876319784690933640869,
            126.8236026513227165967252536,
            -19.1969118730278558004999227,
            -463.188923026716810808534358,
            -1340.65914437689218972710196,
            -2572.45474040443551676357438,
            -3457.14120864538995380946230,
            -2055.27581623197430457282515,
            5372.282213203191284181833545,
            24019.38937760698818204861035,
            57424.31929696407550657104394,
            98543.25459014604211093211428,
            111670.9578149410793387893403,
            5333.665210500764343403713072,
            -390972.687313396395777542816,
            -1303180.71253251980857357826,
            -2845076.55260861211652324310,
            -4540526.60973772410050922086,
            -4341905.13900151619841567026,
            2871566.945972460509905357306,
            26604908.54668677092425521912,
            79321663.11929906059211001875,
            166215134.0468254355839825083,
            255153258.3082389934909848078,
            212655631.6918540369512019248
    };

    private RiemannZetaFunction() {
        // インスタンス化不可
        throw new AssertionError();
    }

    /**
     * 与えた引数に対する Riemann ゼータ関数の値を返す. <br>
     * 引数が 1 未満なら NaN, 1なら正の無限大を返す.
     * 
     * @param s s
     * @return zeta(s)
     */
    static double at(double s) {
        if (!(s >= 1d)) {
            return Double.NaN;
        }
        if (s == 1d) {
            return Double.POSITIVE_INFINITY;
        }

        if (s <= THRESHOLD_S) {

            /*
             * べき級数で計算.
             * zeta(1+t) = (1/t)
             * + sum_{n = 0} (-1)^n gamma[n] / n! * t^n
             */
            double t = s - 1d;
            double v = 0d;
            for (int n = stieltjesConst.length - 1; n >= 0; n--) {
                v *= -t / (n + 1);
                v += stieltjesConst[n];
            }
            return v + 1d / t;

        } else {

            /*
             * 定義により計算.
             * zeta(s) =
             * + sum_{n = 1} 1 / n^s
             */
            double v = 0d;
            for (int n = 10; n >= 2; n--) {
                v += Math.pow(1d / n, s);
            }
            return 1d + v;
        }
    }
}
